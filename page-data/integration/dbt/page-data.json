{
    "componentChunkName": "component---src-templates-integration-tsx",
    "path": "/integration/dbt/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"dbt\",\n  \"description\": \"Enabling OpenLineage in dbt can capture lineage metadata for transformations running within your data warehouse.\",\n  \"image\": \"./stack.png\",\n  \"banner\": \"./banner.svg\",\n  \"version\": \"0.20+\",\n  \"datasources\": \"Snowflake, Google BigQuery\",\n  \"github\": \"https://github.com/OpenLineage/OpenLineage/tree/main/integration/dbt\",\n  \"blog\": \"https://openlineage.io/blog/dbt-with-marquez/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    className: \"table-of-contents\"\n  }, mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#what-is-dbt\"\n  }, \"What is dbt?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#how-does-dbt-work-with-openlineage\"\n  }, \"How does dbt work with OpenLineage?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#preparing-a-dbt-project-for-openlineage\"\n  }, \"Preparing a dbt project for OpenLineage\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#running-dbt-with-openlineage\"\n  }, \"Running dbt with OpenLineage\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#where-can-i-learn-more\"\n  }, \"Where can I learn more?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#feedback\"\n  }, \"Feedback\")))), mdx(\"h2\", {\n    \"id\": \"what-is-dbt\"\n  }, \"What is dbt?\"), mdx(\"p\", null, \"dbt (data build tool) is a powerful transformation engine. It operates on data already within a warehouse, making it easy for data engineers to build complex pipelines from the comfort of their laptops. While it doesn\\u2019t perform extraction and loading of data, it\\u2019s extremely powerful at transformations.\"), mdx(\"p\", null, \"To learn more about dbt, visit the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.getdbt.com\"\n  }, \"documentation site\"), \" or run through the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.getdbt.com/tutorial/setting-up\"\n  }, \"getting started tutorial\"), \".\"), mdx(\"h2\", {\n    \"id\": \"how-does-dbt-work-with-openlineage\"\n  }, \"How does dbt work with OpenLineage?\"), mdx(\"p\", null, \"Fortunately, dbt already collects a lot of the data required to create and emit OpenLineage events. When it runs, it creates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target/manifest.json\"), \" file containing information about jobs and the datasets they affect, and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target/run_results.json\"), \" file containing information about the run-cycle. These files can be used to trace lineage and job performance. In addition, by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create catalog\"), \" command, a user can instruct dbt to create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target/catalog.json\"), \" file containing information about dataset schemas.\"), mdx(\"p\", null, \"These files contain everything needed to trace lineage. However, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target/manifest.json\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target/run_results.json\"), \" files are only populated with comprehensive metadata after completion of a run-cycle. \"), mdx(\"p\", null, \"This integration is implemented as a wrapper script, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt-ol\"), \", that calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt\"), \" and, after the run has completed, collects information from the three json files and calls the OpenLineage API accordingly. For most users, enabling OpenLineage metadata collection can be accomplished by simply substituting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt-ol\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt\"), \" when performing a run.\"), mdx(\"h2\", {\n    \"id\": \"preparing-a-dbt-project-for-openlineage\"\n  }, \"Preparing a dbt project for OpenLineage\"), mdx(\"p\", null, \"First, we need to install the integration:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"pip3 install openlineage-dbt\"), \"\\n        \"), mdx(\"p\", null, \"Next, we specify where we want dbt to send OpenLineage events by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OPENLINEAGE_URL\"), \" environment variable. For example, to send OpenLineage events to a local instance of Marquez, use:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"OPENLINEAGE_URL=http://localhost:5000\"), \"\\n        \"), mdx(\"p\", null, \"Finally, we can optionally specify a namespace where the lineage events will be stored. For example, to use the namespace \\\"dev\\\":\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"OPENLINEAGE_NAMESPACE=dev\"), \"\\n        \"), mdx(\"h2\", {\n    \"id\": \"running-dbt-with-openlineage\"\n  }, \"Running dbt with OpenLineage\"), mdx(\"p\", null, \"To run your dbt project with OpenLineage collection, simply replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt-ol\"), \":\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"dbt-ol run\"), \"\\n        \"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt-ol\"), \" wrapper supports all of the standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dbt\"), \" subcommands, and is safe to use as a substitutuon (i.e., in an alias). Once the run has completed, you will see output containing the number of events sent via the OpenLineage API:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"Completed successfully\\n\\nDone. PASS=2 WARN=0 ERROR=0 SKIP=0 TOTAL=2\\nEmitted 4 openlineage events\"), \"\\n        \"), mdx(\"h2\", {\n    \"id\": \"where-can-i-learn-more\"\n  }, \"Where can I learn more?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Watch \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://youtu.be/7caHXLDKacg\"\n  }, \"a short demonstration of the integration in action\"))), mdx(\"h2\", {\n    \"id\": \"feedback\"\n  }, \"Feedback\"), mdx(\"p\", null, \"What did you think of this guide? You can reach out to us on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://bit.ly/OpenLineageSlack\"\n  }, \"slack\"), \" and leave us feedback!  \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"dbt","date":null,"description":"Enabling OpenLineage in dbt can capture lineage metadata for transformations running within your data warehouse.","banner":{"publicURL":"/static/fbbf5e16fe4ce0026e47e9fefbdc0113/banner.svg","childImageSharp":null}}}},"pageContext":{"slug":"/integration/dbt/"}},
    "staticQueryHashes": ["1139857438","1946588481","2083862410","2213455283","2418326273","3067102388"]}