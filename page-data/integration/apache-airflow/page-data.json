{
    "componentChunkName": "component---src-templates-integration-tsx",
    "path": "/integration/apache-airflow/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Apache Airflow\",\n  \"description\": \"Enabling OpenLineage in Apache Airflow automatically tracks metadata about jobs and datasets as DAGs execute.\",\n  \"image\": \"./stack.png\",\n  \"banner\": \"./banner.svg\",\n  \"version\": \"1.10+, 2.0+\",\n  \"datasources\": \"PostgreSQL, Snowflake, Amazon Redshift, Google BigQuery, Great Expectations\",\n  \"github\": \"https://github.com/OpenLineage/OpenLineage/tree/main/integration/airflow\",\n  \"blog\": \"https://openlineage.io/blog/backfilling-airflow-dags-using-marquez/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    className: \"table-of-contents\"\n  }, mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#what-is-apache-airflow\"\n  }, \"What is Apache Airflow?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#how-does-airflow-work-with-openlineage\"\n  }, \"How does Airflow work with OpenLineage?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#how-can-i-use-this-integration\"\n  }, \"How can I use this integration?\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#prerequisites\"\n  }, \"Prerequisites\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#configuration\"\n  }, \"Configuration\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#usage\"\n  }, \"Usage\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#airflow-110\"\n  }, \"Airflow 1.10+\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#airflow-20\"\n  }, \"Airflow 2.0+\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#what-to-expect\"\n  }, \"What to expect\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#where-can-i-learn-more\"\n  }, \"Where can I learn more?\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#feedback\"\n  }, \"Feedback\")))), mdx(\"h2\", {\n    \"id\": \"what-is-apache-airflow\"\n  }, \"What is Apache Airflow?\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Airflow\"), \" is a widely-used workflow automation and scheduling platform that can be used to author and manage data pipelines. Airflow uses workflows made of directed acyclic graphs (DAGs) of tasks. To learn more about Airflow, check out the Airflow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://airflow.apache.org/docs/apache-airflow/stable/index.html\"\n  }, \"documentation\"), \".\"), mdx(\"h2\", {\n    \"id\": \"how-does-airflow-work-with-openlineage\"\n  }, \"How does Airflow work with OpenLineage?\"), mdx(\"p\", null, \"Understanding complex inter-DAG dependencies and providing up-to-date runtime visibility into DAG execution can be challenging. OpenLineage integrates with Airflow to collect DAG lineage metadata so that inter-DAG dependencies are easily maintained and viewable via a lineage graph, while also keeping a catalog of historical runs of DAGs.\"), mdx(\"img\", {\n    \"className\": \"m-12\",\n    \"src\": \"/cf6b8efc171dda2fac64b932aa40b5c7/af-schematic.svg\"\n  }), mdx(\"p\", null, \"The integration is implemented using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pypi.org/project/openlineage-airflow\"\n  }, \"openlineage-airflow\"), \"  integration library, which sends OpenLineage events to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marquezproject.ai\"\n  }, \"Marquez\"), \". The DAG metadata collected can answer questions like:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why has a DAG failed?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why has the DAG runtime increased after a code change?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What are the upstream dependencies of a DAG?\")), mdx(\"h2\", {\n    \"id\": \"how-can-i-use-this-integration\"\n  }, \"How can I use this integration?\"), mdx(\"h3\", {\n    \"id\": \"prerequisites\"\n  }, \"Prerequisites\"), mdx(\"p\", null, \"To use the OpenLineage Airflow integration, you'll need a running Airflow instance. You'll also need an OpenLineage compatible \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/OpenLineage/OpenLineage#scope\"\n  }, \"HTTP backend\"), \". In this guide, we'll be using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"openlineage-airflow\"), \" library to automatically send OpenLineage events to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marquezproject.ai\"\n  }, \"Marquez\"), \". \"), mdx(\"h3\", {\n    \"id\": \"configuration\"\n  }, \"Configuration\"), mdx(\"p\", null, \"Next, we'll need to specify where we want Airflow to send OpenLineage events. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"openlineage-airflow\"), \" will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OPENLINEAGE_URL\"), \" environment variable to send OpenLineage events to Marquez. Optionally, we can also specify a namespace where the lineage events will be stored using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OPENLINEAGE_NAMESPACE\"), \" environment variable.\"), mdx(\"p\", null, \"For example, to send OpenLineage events to a local instance of Marquez with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev\"), \" namespace, use:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"OPENLINEAGE_URL=http://localhost:5000\\nOPENLINEAGE_NAMESPACE=\\\"dev\\\"\"), \"\\n        \"), mdx(\"h3\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"h4\", {\n    \"id\": \"airflow-110\"\n  }, \"Airflow 1.10+\"), mdx(\"p\", null, \"First, download and install the latest \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"openlineage-airflow\"), \" library, by updating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requirements.txt\"), \" file of your running Airflow instance with: \"), mdx(\"deckgo-highlight-code\", {\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"openlineage-airflow\"), \"\\n        \"), mdx(\"p\", null, \"Then, to begin collecting Airflow DAG metadata with Marquez, make the following change to your DAG:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"diff\",\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"- from airflow import DAG\\n+ from openlineage.airflow import DAG\"), \"\\n        \"), mdx(\"h4\", {\n    \"id\": \"airflow-20\"\n  }, \"Airflow 2.0+\"), mdx(\"p\", null, \"Set your LineageBackend in your \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://airflow.apache.org/docs/apache-airflow/stable/howto/set-config.html\"\n  }, \"airflow.cfg\"), \" or via environmental variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AIRFLOW__LINEAGE__BACKEND\"), \" to\"), mdx(\"deckgo-highlight-code\", {\n    \"terminal\": \"carbon\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"openlineage.lineage_backend.OpenLineageBackend\"), \"\\n        \"), mdx(\"p\", null, \"In contrast to integration via subclassing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DAG\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LineageBackend\"), \" based approach collects all metadata for task on each task completion.\"), mdx(\"h3\", {\n    \"id\": \"what-to-expect\"\n  }, \"What to expect\"), mdx(\"p\", null, \"When enabled, the library will:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On DAG \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"start\"), \", collect metadata for each task\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Collect task input / output metadata (source, schema, etc)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Collect task run-level metadata (execution time, state, parameters, etc)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On DAG \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"complete\"), \", also mark the task as complete in Marquez\")), mdx(\"h2\", {\n    \"id\": \"where-can-i-learn-more\"\n  }, \"Where can I learn more?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take a look at Marquez's Airflow \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/MarquezProject/marquez/tree/main/examples/airflow\"\n  }, \"example\"), \" to learn how to enable OpenLineage metadata collection for Airflow DAGs and troubleshoot failing DAGs using Marquez.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Watch \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=dfRetdg9444\"\n  }, \"Data Lineage with Apache Airflow\"))), mdx(\"h2\", {\n    \"id\": \"feedback\"\n  }, \"Feedback\"), mdx(\"p\", null, \"What did you think of this guide? You can reach out to us on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://bit.ly/OpenLineageSlack\"\n  }, \"slack\"), \" and leave us feedback!  \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Apache Airflow","date":null,"description":"Enabling OpenLineage in Apache Airflow automatically tracks metadata about jobs and datasets as DAGs execute.","banner":{"publicURL":"/static/a69459691c565818dcee0d68bd19118b/banner.svg","childImageSharp":null}}}},"pageContext":{"slug":"/integration/apache-airflow/"}},
    "staticQueryHashes": ["1139857438","1946588481","2083862410","2213455283","2418326273","3067102388"]}